table1(final)
colnames(final)
table1(~ . | ATRT, data=final)
table1(~ .-SUBJID | ATRT, data=final)
length(final)
rep(1:length(final), times=sapply(final, length))
factor(rep(1:length(final), times=sapply(final, length)))
pvalue <- function(dl) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(dl)
g <- factor(rep(1:length(dl), times=sapply(dl, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- t.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
table1(~ .-SUBJID | ATRT,
data=final, overall=F, extra.col=list(`P-value`=pvalue))
?t.test()
str(final)
pvalue <- function(dl) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(dl)
g <- factor(rep(1:length(dl), times=sapply(dl, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- t.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
table1(~ .-SUBJID | ATRT, data=final, overall=F, extra.col=list(`P-value`=pvalue))
table1(~ .-SUBJID | ATRT, data=final, overall=F, extra.col=list(`P-value`=pvalue(fianl)))
table1(~ .-SUBJID | ATRT, data=final, overall=F, extra.col=list(`P-value`=pvalue(final)))
pvalue <- function(dl) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(dl)
g <- factor(rep(1:length(dl), times=sapply(dl, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- t.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
table1(~ .-SUBJID | ATRT, data=final, overall=F, extra.col=list(`P-value`=pvalue(final)))
pvalue <- function(x, ...) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(x)
g <- factor(rep(1:length(x), times=sapply(x, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- t.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
table1(~ .-SUBJID | ATRT, data=final, overall=F, extra.col=list(`P-value`=pvalue))
table1(~ .-SUBJID-DTH-DTHDY | ATRT, data=final, overall=F, extra.col=list(`P-value`=pvalue))
document()
document()
document()
document()
document()
ad <- dl$adae |> select(SUBJID, AEPT, AESEVCD)
View(ad)
unique(ad$AEPT)
ad <- dl$adae |> select(SUBJID, AEPT, AESEVCD) |> group_by(SUBJID) |>
filter(max(AESEVCD))
ad <- dl$adae |> select(SUBJID, AEPT, AESEVCD) |> group_by(SUBJID) |>
filter(AESEVCD == max(AESEVCD))
View(ad)
ad <- dl$adae |> select(SUBJID, AESEVCD) |> group_by(SUBJID) |>
filter(AESEVCD == max(AESEVCD))
View(ad)
View(ad)
ad <- dl$adae |> select(SUBJID, AESEVCD) |> group_by(SUBJID) |>
summarize(AESEVCD = max(AESEVCD))
View(ad)
demo2 <- left_join(demo1, ad, by = "SUBJID")
View(demo2)
document()
pvalue <- function(x, ...) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(x)
g <- factor(rep(1:length(x), times=sapply(x, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- t.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
table1(~ .-SUBJID-DTH-DTHDY | ATRT, data=final, overall=F, extra.col=list(`P-value`=pvalue))
final <- demo2 |> select(SUBJID, DTHDY, DTH,ATRT, AGE, SEX, B_WEIGHT, marker, AESEVCD)
pvalue <- function(x, ...) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(x)
g <- factor(rep(1:length(x), times=sapply(x, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- t.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
table1(~ .-SUBJID-DTH-DTHDY | ATRT, data=final, overall=F, extra.col=list(`P-value`=pvalue))
comb = final |> select(SUBJID,ATRT, SEX)
summary_table <- comb |> group_by(ATRT) |> summarize(
Female = sum(SEX=="Female"),
Male = sum(SEX == "Male"))
plot_tibble = summary_table |>
pivot_longer(-ATRT)
plot_tibble |> ggplot(aes(x = name, y = value))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
xlab("Sex") + ylab("count")
library(ggplot2)
plot_tibble |> ggplot(aes(x = name, y = value))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
xlab("Sex") + ylab("count")
summary_sex <- final |> select(SUBJID,ATRT, SEX) |>
group_by(ATRT) |> summarize(
Female = sum(SEX=="Female"),
Male = sum(SEX == "Male"))
plot_sex <- summary_sex |>
pivot_longer(-ATRT) |> ggplot(aes(x = name, y = value))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
xlab("Sex") + ylab("count")
plot_sex
final
ggplot(final, aes(x = SEX)) +
geom_line() +  # or geom_point() for a scatter plot
facet_wrap("ATRT")
ggplot(final, aes(x = SEX)) + geom_line() +  # or geom_point() for a scatter plot
+     facet_wrap("ATRT")
ggplot(final, aes(x = SEX)) + geom_col() +  facet_wrap("ATRT")
summary_sex
summary_sex |>
pivot_longer(-ATRT)
ggplot(data, aes(x = AGE)) +
geom_line() +
facet_wrap(~ ATRT)
ggplot(final, aes(x = AGE)) +
geom_line() +  # or geom_point() for a scatter plot
facet_wrap(~ ATRT)
View(final)
final %>%    count(cut_width(AGE, 10))
final |> group_by(ATRT) |> count(cut_width(AGE, 10))
summary_age |>
pivot_longer(-ATRT)
summary_age <- final |> group_by(ATRT) |> count(cut_width(AGE, 10))
summary_age |>
pivot_longer(-ATRT)
summary_age
summary_sex
summary_sex |>
pivot_longer(-ATRT)
summary_age |> ggplot(aes(x = `cut_width(AGE, 10)`, y = n))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
xlab("Age") + ylab("count")
summary_age |> ggplot(aes(x = `cut_width(AGE, 10)`, y = n))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Age") + ylab("count")
final |> group_by(ATRT) |> count(cut_width(B_WEIGHT, 20))
summary_weight |> ggplot(aes(x = `cut_width(B_WEIGHT, 20)`, y = n))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Weight") + ylab("count")
summary_weight <- final |> group_by(ATRT) |> count(cut_width(B_WEIGHT, 20))
summary_weight |> ggplot(aes(x = `cut_width(B_WEIGHT, 20)`, y = n))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Weight") + ylab("count")
summary_marker <- final |> select(SUBJID,ATRT, marker) |>
group_by(ATRT) |> summarize(
Mutant = sum(marker=="Mutant"),
Wild_type = sum(marker == "Wild-type"),
Unknown = sum(marker == "Unknown"))
summary_marker |>
pivot_longer(-ATRT) |> ggplot(aes(x = name, y = value))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
xlab("marker") + ylab("count")
ad$AESEVCD <- factor(ad$AESEVCD, levels = unique(ad$AESEVCD), exclude = NULL)
demo2 <- left_join(demo1, ad, by = "SUBJID")
final <- demo2 |> select(SUBJID, DTHDY, DTH,ATRT, AGE, SEX, B_WEIGHT, marker, AESEVCD)
View(final)
str(final)
pvalue <- function(x, ...) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(x)
g <- factor(rep(1:length(x), times=sapply(x, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- t.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
table1(~ .-SUBJID-DTH-DTHDY | ATRT, data=final, overall=F, extra.col=list(`P-value`=pvalue))
summary_event <- final |> select(SUBJID,ATRT, AESEVCD) |>
group_by(ATRT) |> summarize(
Grade1 = sum(AESEVCD=="1"),
Grade2 = sum(AESEVCD == "2"),
Grade3 = sum(AESEVCD == "3"),
NoEvent = sum(AESEVCD == "Missing"))
summary_event
pvalue <- function(x, ...) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(x)
g <- factor(rep(1:length(x), times=sapply(x, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- t.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
table1(~ .-SUBJID-DTH-DTHDY | ATRT, data=final, overall=F, extra.col=list(`P-value`=pvalue))
str(final)
View(ad)
View(demo2)
ad <- dl$adae |> select(SUBJID, AESEVCD) |> group_by(SUBJID) |>
summarize(AESEVCD = max(AESEVCD))
demo2 <- left_join(demo1, ad, by = "SUBJID")
View(demo2)
demo2$AESEVCD <- factor(demo2$AESEVCD, levels = unique(demo2$AESEVCD), exclude = NULL)
View(demo2)
final <- demo2 |> select(SUBJID, DTHDY, DTH,ATRT, AGE, SEX, B_WEIGHT, marker, AESEVCD)
View(final)
pvalue <- function(x, ...) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(x)
g <- factor(rep(1:length(x), times=sapply(x, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- t.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
table1(~ .-SUBJID-DTH-DTHDY | ATRT, data=final, overall=F, extra.col=list(`P-value`=pvalue))
ad <- dl$adae |> select(SUBJID, AESEVCD) |> group_by(SUBJID) |>
summarize(AESEVCD = max(AESEVCD))
demo2 <- left_join(demo1, ad, by = "SUBJID") |>
ifelse(is.na(AESEVCD), 'No Event', AESEVCD)
ad <- dl$adae |> select(SUBJID, AESEVCD) |> group_by(SUBJID) |>
summarize(AESEVCD = max(AESEVCD))
demo2 <- left_join(demo1, ad, by = "SUBJID")
demo3 <- demo2 |>
ifelse(is.na(AESEVCD), 'No Event', AESEVCD)
is.na(demo2$AESEVCD)
ad <- dl$adae |> select(SUBJID, AESEVCD) |> group_by(SUBJID) |>
summarize(AESEVCD = max(AESEVCD))
demo2 <- left_join(demo1, ad, by = "SUBJID")
demo3 <- demo2 |> ifelse(is.na(AESEVCD) 'No Event', AESEVCD)
ad <- dl$adae |> select(SUBJID, AESEVCD) |> group_by(SUBJID) |>
summarize(AESEVCD = max(AESEVCD))
demo2 <- left_join(demo1, ad, by = "SUBJID")
demo3 <- demo2 |> ifelse(is.na(AESEVCD), 'No Event', AESEVCD)
ad <- dl$adae |> select(SUBJID, AESEVCD) |> group_by(SUBJID) |>
summarize(AESEVCD = max(AESEVCD))
demo2 <- left_join(demo1, ad, by = "SUBJID")
demo2$AESEVCD <- ifelse(is.na(demo2$AESEVCD), 'No Event', demo2$AESEVCD)
demo2$AESEVCD <- factor(demo2$AESEVCD, levels = unique(demo2$AESEVCD), exclude = NULL)
final <- demo2 |> select(SUBJID, DTHDY, DTH,ATRT, AGE, SEX, B_WEIGHT, marker, AESEVCD)
View(final)
pvalue <- function(x, ...) {
# Construct vectors of data y, and groups (strata) g
y <- unlist(x)
g <- factor(rep(1:length(x), times=sapply(x, length)))
if (is.numeric(y)) {
# For numeric variables, perform a standard 2-sample t-test
p <- t.test(y ~ g)$p.value
} else {
# For categorical variables, perform a chi-squared test of independence
p <- chisq.test(table(y, g))$p.value
}
# Format the p-value, using an HTML entity for the less-than sign.
# The initial empty string places the output on the line below the variable label.
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
table1(~ .-SUBJID-DTH-DTHDY | ATRT, data=final, overall=F, extra.col=list(`P-value`=pvalue))
pvalue <- function(x, ...) {
y <- unlist(x)
g <- factor(rep(1:length(x), times=sapply(x, length)))
if (is.numeric(y)) {
p <- t.test(y ~ g)$p.value
} else {
contingency_table <- table(y, g)
if (all(contingency_table >= 5)) {
p <- chisq.test(contingency_table)$p.value
} else {
p <- fisher.test(contingency_table)$p.value
}
}
c("", sub("<", "&lt;", format.pval(p, digits=3, eps=0.001)))
}
table1(~ .-SUBJID-DTH-DTHDY | ATRT, data=final, overall=F, extra.col=list(`P-value`=pvalue))
table1(~ .-SUBJID-DTH-DTHDY | ATRT, data=final)
demo2$AESEVCD <- factor(demo2$AESEVCD, levels = c('No Event', '1','2','3','4'),  exclude = NULL)
final <- demo2 |> select(SUBJID, DTHDY, DTH,ATRT, AGE, SEX, B_WEIGHT, marker, AESEVCD)
table1(~ .-SUBJID-DTH-DTHDY | ATRT, data=final)
final$marker <- factor(final$marker, levels = c('Unknown', 'Mutant','Wild-type'),  exclude = NULL)
table1(~ .-SUBJID-DTH-DTHDY | ATRT, data=final)
summary_event <- final |> select(SUBJID,ATRT, AESEVCD) |>
group_by(ATRT) |> summarize(
Grade1 = sum(AESEVCD=="1"),
Grade2 = sum(AESEVCD == "2"),
Grade3 = sum(AESEVCD == "3"),
Grade4 = sum(AESEVCD == "4"),
NoEvent = sum(AESEVCD == "No Event"))
summary_event
plot_marker <- summary_event |>
pivot_longer(-ATRT) |> ggplot(aes(x = name, y = value))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
xlab("Adverse event") + ylab("count")
plot_marker
plot_event <- summary_event |>
pivot_longer(-ATRT) |> ggplot(aes(x = name, y = value))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
xlab("Adverse event") + ylab("count")
summary_sex <- final |> select(SUBJID,ATRT, SEX) |>
group_by(ATRT) |> summarize(
Female = sum(SEX=="Female"),
Male = sum(SEX == "Male"))
plot_sex <- summary_sex |>
pivot_longer(-ATRT) |> ggplot(aes(x = name, y = value))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
xlab("Sex") + ylab("count")
summary_age <- final |> group_by(ATRT) |> count(cut_width(AGE, 10))
plot_age <- summary_age |> ggplot(aes(x = `cut_width(AGE, 10)`, y = n))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Age") + ylab("count")
summary_weight <- final |> group_by(ATRT) |> count(cut_width(B_WEIGHT, 20))
plot_weight <- summary_weight |> ggplot(aes(x = `cut_width(B_WEIGHT, 20)`, y = n))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Weight") + ylab("count")
summary_marker <- final |> select(SUBJID,ATRT, marker) |>
group_by(ATRT) |> summarize(
Mutant = sum(marker=="Mutant"),
Wild_type = sum(marker == "Wild-type"),
Unknown = sum(marker == "Unknown"))
plot_marker <- summary_marker |>
pivot_longer(-ATRT) |> ggplot(aes(x = name, y = value))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
xlab("marker") + ylab("count")
summary_event <- final |> select(SUBJID,ATRT, AESEVCD) |>
group_by(ATRT) |> summarize(
Grade1 = sum(AESEVCD=="1"),
Grade2 = sum(AESEVCD == "2"),
Grade3 = sum(AESEVCD == "3"),
Grade4 = sum(AESEVCD == "4"),
NoEvent = sum(AESEVCD == "No Event"))
plot_event <- summary_event |>
pivot_longer(-ATRT) |> ggplot(aes(x = name, y = value))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
xlab("Adverse event") + ylab("count")
plot_sex
plot_age
plot_weight
plot_marker
plot_marker <- summary_marker |>
pivot_longer(-ATRT) |> ggplot(aes(x = name, y = value))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("marker") + ylab("count")
plot_marker
plot_event <- summary_event |>
pivot_longer(-ATRT) |> ggplot(aes(x = name, y = value))+
geom_col() +
theme_bw() +
facet_wrap("ATRT")+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
xlab("Adverse event") + ylab("count")
plot_event
par(mfrow=c(3,2))
plot_sex
plot_age
plot_weight
plot_marker
plot_event
par(mfrow=c(3,2))
plot_sex
plot_age
plot_weight
plot_marker
grid.arrange(plot_sex, plot_age, plot_weight, plot_marker, plot_event, ncol=2)
ggarrange(plot_sex, plot_age, plot_weight, plot_marker, plot_event, ncol=2)
library(gridExtra)
grid.arrange(plot_sex, plot_age, plot_weight, plot_marker, plot_event, ncol=2)
document()
cox = coxph(Surv(DTHDY, DTH) ~ .-SUBJID-DTHDY-DTH, data = final)
library(survival)
library(survminer)
cox = coxph(Surv(DTHDY, DTH) ~ .-SUBJID-DTHDY-DTH, data = final)
str(final)
demo <- dl$adsl |> select(SUBJID, DTHDY, DTH,ATRT, AGE, SEX, B_WEIGHT, DIAGTYPE) |>
filter(DIAGTYPE == "Colon")
demo$SEX <- factor(demo$SEX, levels = unique(demo$SEX), exclude = NULL)
demo$ATRT <- factor(demo$ATRT, levels = unique(demo$ATRT),exclude = NULL)
bio <- dl$biomark |>
select(SUBJID,BMMTNM1,BMMTR1,BMMTNM2,BMMTR2,BMMTNM3,BMMTR3,BMMTNM15,BMMTR15 )
bio <- replace(bio, bio == "", "Unknown")
demo1 <- left_join(demo, bio, by = "SUBJID")
demo1$marker <- apply(demo1[, c("BMMTR1", "BMMTR2", "BMMTR3", "BMMTR15")], 1, function(row) {
if ("Mutant" %in% row) {
"Mutant"
} else if (sum(row == "Wild-type") > sum(row %in% c("Unknown", "Failure"))) {
"Wild-type"
} else {
"Unknown"
}
})
ad <- dl$adae |> select(SUBJID, AESEVCD) |> group_by(SUBJID) |>
summarize(AESEVCD = max(AESEVCD))
demo2 <- left_join(demo1, ad, by = "SUBJID")
demo2$AESEVCD <- ifelse(is.na(demo2$AESEVCD), 'No Event', demo2$AESEVCD)
demo2$AESEVCD <- factor(demo2$AESEVCD, levels = c('No Event', '1','2','3','4'),  exclude = NULL)
final <- demo2 |> select(SUBJID, DTHDY, DTH,ATRT, AGE, SEX, B_WEIGHT, marker, AESEVCD)
final$marker <- factor(final$marker, levels = c('Unknown', 'Mutant','Wild-type'),  exclude = NULL)
str(final)
cox = coxph(Surv(DTHDY, DTH) ~ .-SUBJID-DTHDY-DTH, data = final)
colnames(final)
final$ATRT
colnames(final)
cox = coxph(Surv(DTHDY, DTH) ~ ATRT + AGE + SEX + B_WEIGHT + marker + AESEVCD, data = final )
summary(cox)
cox = coxph(Surv(DTHDY, DTH) ~ ATRT + AGE , data = final )
summary(cox)
cox = coxph(Surv(DTHDY, DTH) ~ ATRT + marker , data = final )
summary(cox)
cox = coxph(Surv(DTHDY, DTH) ~ AGE , data = final )
summary(cox)
cox = coxph(Surv(DTHDY, DTH) ~ SEX , data = final )
summary(cox)
cox = coxph(Surv(DTHDY, DTH) ~ B_WEIGHT , data = final )
summary(cox)
cox = coxph(Surv(DTHDY, DTH) ~ ATRT , data = final )
summary(cox)
